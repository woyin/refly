openapi: 3.0.3
info:
  title: Refly AI
  description: AI-native knowledge management solutions and infra.
  contact:
    email: support@refly.ai
  version: 0.2.0
externalDocs:
  description: The AI Native Creation Engine
  url: https://refly.ai
servers:
  - url: /v1
tags:
  - name: auth
    description: Authentication endpoints
  - name: canvas
    description: Canvas management endpoints
  - name: knowledge
    description: Knowledge base management endpoints
  - name: project
    description: Project management endpoints
  - name: share
    description: Share management endpoints
  - name: label
    description: Label management endpoints
  - name: action
    description: Action management endpoints
  - name: skill
    description: Skill management endpoints
  - name: codeArtifact
    description: Code artifact management endpoints
  - name: user
    description: User management endpoints
  - name: search
    description: Search related endpoints
  - name: misc
    description: Miscellaneous endpoints
paths:
  /auth/config:
    get:
      tags:
        - auth
      summary: Get auth config
      description: Get auth config
      operationId: getAuthConfig
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthConfigResponse'
  /auth/refreshToken:
    post:
      tags:
        - auth
      summary: Refresh token
      description: Refresh token
      operationId: refreshToken
      responses:
        '200':
          description: Successful operation
  /auth/email/signup:
    post:
      tags:
        - auth
      summary: Sign up with email
      description: Sign up with email
      operationId: emailSignup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailSignupRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailSignupResponse'
  /auth/email/login:
    post:
      tags:
        - auth
      summary: Login with email
      description: Login with email
      operationId: emailLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailLoginRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailLoginResponse'
  /auth/verification/create:
    post:
      tags:
        - auth
      summary: Create verification session
      description: Create a verification session
      operationId: createVerification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVerificationRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVerificationResponse'
  /auth/verification/resend:
    post:
      tags:
        - auth
      summary: Resend verification
      description: Resend verification
      operationId: resendVerification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendVerificationRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /auth/verification/check:
    post:
      tags:
        - auth
      summary: Verify authentication session
      description: Verify account creation
      operationId: checkVerification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckVerificationRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /auth/logout:
    post:
      tags:
        - auth
      summary: Logout
      description: Logout
      operationId: logout
      responses:
        '200':
          description: Successful operation
  /collab/getToken:
    get:
      tags:
        - collab
      summary: Get collab token
      description: Get collab token
      operationId: getCollabToken
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCollabTokenResponse'
  /canvas/list:
    get:
      tags:
        - canvas
      summary: List user canvases
      description: List all canvases for a user
      operationId: listCanvases
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
        - name: projectId
          in: query
          description: Related project ID
          schema:
            type: string
        - name: order
          in: query
          description: Order
          schema:
            $ref: '#/components/schemas/ListOrder'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCanvasResponse'
  /canvas/detail:
    get:
      tags:
        - canvas
      summary: Get canvas detail
      description: Get canvas detail
      operationId: getCanvasDetail
      parameters:
        - name: canvasId
          in: query
          description: Canvas ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCanvasDetailResponse'
  /canvas/data:
    get:
      tags:
        - canvas
      summary: Get canvas data
      description: Get public canvas data without checking user identity
      operationId: getCanvasData
      parameters:
        - name: canvasId
          in: query
          description: Canvas ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportCanvasResponse'
  /canvas/export:
    get:
      tags:
        - canvas
      summary: Export canvas
      description: Export canvas
      operationId: exportCanvas
      parameters:
        - name: canvasId
          in: query
          description: Canvas ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportCanvasResponse'
  /canvas/import:
    post:
      tags:
        - canvas
      summary: Import canvas
      description: Import canvas
      operationId: importCanvas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RawCanvasData'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertCanvasResponse'
  /canvas/create:
    post:
      tags:
        - canvas
      summary: Create canvas
      description: Create a new canvas
      operationId: createCanvas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertCanvasRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertCanvasResponse'
  /canvas/duplicate:
    post:
      tags:
        - canvas
      summary: Duplicate canvas
      description: Duplicate an existing canvas
      operationId: duplicateCanvas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DuplicateCanvasRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertCanvasResponse'
  /canvas/update:
    post:
      tags:
        - canvas
      summary: Update canvas
      description: Update an existing canvas
      operationId: updateCanvas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertCanvasRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertCanvasResponse'
  /canvas/delete:
    post:
      tags:
        - canvas
      summary: Delete canvas
      description: Delete an existing canvas
      operationId: deleteCanvas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCanvasRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /canvas/autoName:
    post:
      tags:
        - canvas
      summary: Auto name canvas
      description: Auto name a canvas
      operationId: autoNameCanvas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutoNameCanvasRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutoNameCanvasResponse'
  /template/list:
    get:
      tags:
        - canvas
      summary: List canvas templates
      description: List all canvas templates
      operationId: listCanvasTemplates
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
        - name: language
          in: query
          description: Language code
          example: en
          schema:
            type: string
        - name: categoryId
          in: query
          description: Canvas template category ID
          schema:
            type: string
        - name: scope
          in: query
          description: Scope
          schema:
            type: string
            default: public
            enum:
              - public
              - private
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCanvasTemplateResponse'
  /template/create:
    post:
      tags:
        - canvas
      summary: Create canvas template
      description: Create a new canvas template
      operationId: createCanvasTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCanvasTemplateRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertCanvasTemplateResponse'
  /template/update:
    post:
      tags:
        - canvas
      summary: Update canvas template
      description: Update an existing canvas template
      operationId: updateCanvasTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCanvasTemplateRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertCanvasTemplateResponse'
  /template/category/list:
    get:
      tags:
        - canvas
      summary: List canvas template categories
      description: List all canvas template categories
      operationId: listCanvasTemplateCategories
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCanvasTemplateCategoryResponse'
  /knowledge/resource/list:
    get:
      tags:
        - knowledge
      summary: List resources
      description: List all resources
      operationId: listResources
      parameters:
        - name: resourceId
          in: query
          description: Resource ID
          schema:
            type: string
            example: r-g30e1b80b5g1itbemc0g5jj3
        - name: resourceType
          in: query
          description: Resource type
          schema:
            type: string
            $ref: '#/components/schemas/ResourceType'
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
        - name: projectId
          in: query
          description: Related project ID
          schema:
            type: string
        - name: order
          in: query
          description: Order
          required: false
          schema:
            $ref: '#/components/schemas/ListOrder'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResourceResponse'
      security:
        - api_key: []
  /knowledge/resource/detail:
    get:
      tags:
        - knowledge
      summary: Get resource detail
      description: Return resource detail along with its document content
      operationId: getResourceDetail
      parameters:
        - name: resourceId
          in: query
          description: Resource ID to retrieve
          required: true
          schema:
            type: string
            example: r-g30e1b80b5g1itbemc0g5jj3
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResourceDetailResponse'
      security:
        - api_key: []
  /knowledge/resource/update:
    post:
      tags:
        - knowledge
      summary: Update resource
      description: Update an existing resource
      operationId: updateResource
      requestBody:
        description: Resource update request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertResourceRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertResourceResponse'
      security:
        - api_key: []
  /knowledge/resource/create:
    post:
      tags:
        - knowledge
      summary: Create new resource
      description: Create a new resource
      operationId: createResource
      requestBody:
        description: Resource creation request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertResourceRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertResourceResponse'
      security:
        - api_key: []
  /knowledge/resource/createWithFile:
    post:
      tags:
        - knowledge
      summary: Create new resource with file upload
      description: Create a new resource with file upload in a single request
      operationId: createResourceWithFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - title
                - resourceType
              properties:
                file:
                  type: string
                  format: binary
                  description: File to upload
                title:
                  type: string
                  description: Resource title
                  example: My Resource
                resourceType:
                  description: Resource type
                  $ref: '#/components/schemas/ResourceType'
                resourceId:
                  type: string
                  description: Resource ID (only used for update)
                  example: r-g30e1b80b5g1itbemc0g5jj3
                data:
                  description: Resource metadata
                  $ref: '#/components/schemas/ResourceMeta'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertResourceResponse'
      security:
        - api_key: []
  /knowledge/resource/batchCreate:
    post:
      tags:
        - knowledge
      summary: Batch create new resources
      description: Batch create a new resource
      operationId: batchCreateResource
      requestBody:
        description: Resource creation request
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpsertResourceRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreateResourceResponse'
      security:
        - api_key: []
  /knowledge/resource/reindex:
    post:
      tags:
        - knowledge
      summary: Reindex resource
      description: Reindex an existing resource
      operationId: reindexResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReindexResourceRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReindexResourceResponse'
      security:
        - api_key: []
  /knowledge/resource/delete:
    post:
      tags:
        - knowledge
      summary: Delete resource
      description: Delete an existing resource
      operationId: deleteResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteResourceRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /knowledge/document/list:
    get:
      tags:
        - knowledge
      summary: List user documents
      description: List all documents for a user
      operationId: listDocuments
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          required: false
          schema:
            type: number
            default: 10
        - name: projectId
          in: query
          description: Related project ID
          schema:
            type: string
        - name: order
          in: query
          description: Order by
          required: false
          schema:
            $ref: '#/components/schemas/ListOrder'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDocumentResponse'
  /knowledge/document/detail:
    get:
      tags:
        - knowledge
      summary: Get canvas detail
      description: Return document detail
      operationId: getDocumentDetail
      parameters:
        - name: docId
          in: query
          description: Document ID to retrieve
          required: true
          schema:
            type: string
            example: d-g30e1b80b5g1itbemc0g5jj3
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentDetailResponse'
  /knowledge/document/update:
    post:
      tags:
        - knowledge
      summary: Update canvas
      description: Update an existing document
      operationId: updateDocument
      requestBody:
        description: Document update request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertDocumentRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertDocumentResponse'
      security:
        - api_key: []
  /knowledge/document/create:
    post:
      tags:
        - knowledge
      summary: Create new canvas
      description: Create a new document
      operationId: createDocument
      requestBody:
        description: Document creation request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertDocumentRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertDocumentResponse'
      security:
        - api_key: []
  /knowledge/document/delete:
    post:
      tags:
        - knowledge
      summary: Delete canvas
      description: Delete an existing document
      operationId: deleteDocument
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDocumentRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /knowledge/document/batchUpdate:
    post:
      tags:
        - knowledge
      summary: Batch update documents
      description: Batch update existing documents
      operationId: batchUpdateDocument
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpsertDocumentRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /knowledge/reference/query:
    post:
      tags:
        - knowledge
      summary: Query references
      description: Query references by source or target entity
      operationId: queryReferences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryReferencesRequest'
      responses:
        '200':
          description: Successful operation
  /knowledge/reference/add:
    post:
      tags:
        - knowledge
      summary: Add references
      description: Add references between source and target entities
      operationId: addReferences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddReferencesRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /knowledge/reference/delete:
    post:
      tags:
        - knowledge
      summary: Delete references
      description: Delete references between source and target entities
      operationId: deleteReferences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteReferencesRequest'
      responses:
        '200':
          description: Successful operation
  /project/list:
    get:
      tags:
        - project
      summary: List projects
      description: List all projects
      operationId: listProjects
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          required: false
          schema:
            type: number
            default: 10
        - name: order
          in: query
          description: Order by
          required: false
          schema:
            $ref: '#/components/schemas/ListOrder'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProjectResponse'
  /project/detail:
    get:
      tags:
        - project
      summary: Get project detail
      description: Get project detail by project ID
      operationId: getProjectDetail
      parameters:
        - name: projectId
          in: query
          description: Project ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProjectDetailResponse'
  /project/new:
    post:
      tags:
        - project
      summary: Create new project
      description: Create a new project
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertProjectRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertProjectResponse'
  /project/update:
    post:
      tags:
        - project
      summary: Update project
      description: Update an existing project
      operationId: updateProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertProjectRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertProjectResponse'
  /project/updateItems:
    post:
      tags:
        - project
      summary: Update items in project
      description: Update items in a project
      operationId: updateProjectItems
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectItemsRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /project/delete:
    post:
      tags:
        - project
      summary: Delete project
      description: Delete an existing project
      operationId: deleteProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteProjectRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /project/deleteItems:
    post:
      tags:
        - project
      summary: Delete items in project
      description: Delete items in a project
      operationId: deleteProjectItems
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteProjectItemsRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /codeArtifact/detail:
    get:
      tags:
        - codeArtifact
      summary: Get code artifact detail
      description: Get code artifact detail by artifact ID
      operationId: getCodeArtifactDetail
      parameters:
        - name: artifactId
          in: query
          description: Artifact ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCodeArtifactDetailResponse'
  /codeArtifact/new:
    post:
      tags:
        - codeArtifact
      summary: Create code artifact
      description: Create new code artifact
      operationId: createCodeArtifact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertCodeArtifactRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertCodeArtifactResponse'
  /codeArtifact/update:
    post:
      tags:
        - codeArtifact
      summary: Update code artifact
      description: Update code artifact by artifact ID
      operationId: updateCodeArtifact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertCodeArtifactRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertCodeArtifactResponse'
  /share/new:
    post:
      tags:
        - share
      summary: Create share
      description: Create new share for canvas
      operationId: createShare
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateShareRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateShareResponse'
  /share/list:
    get:
      tags:
        - share
      summary: List shares
      description: List all shares
      operationId: listShares
      parameters:
        - name: shareId
          in: query
          description: Share ID
          schema:
            type: string
        - name: entityId
          in: query
          description: Entity ID
          schema:
            type: string
        - name: entityType
          in: query
          description: Entity type
          schema:
            $ref: '#/components/schemas/EntityType'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListShareResponse'
  /share/delete:
    post:
      tags:
        - share
      summary: Delete share
      description: Delete an existing share
      operationId: deleteShare
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteShareRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /share/duplicate:
    post:
      tags:
        - share
      summary: Duplicate share
      description: Duplicate an existing share
      operationId: duplicateShare
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DuplicateShareRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DuplicateShareResponse'
  /label/class/list:
    get:
      tags:
        - label
      summary: List label classes
      description: List all label classes
      operationId: listLabelClasses
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLabelClassesResponse'
      security:
        - api_key: []
  /label/class/new:
    post:
      tags:
        - label
      summary: Create new label class
      description: Create a new label class
      operationId: createLabelClass
      requestBody:
        description: Label class creation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLabelClassRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertLabelClassResponse'
  /label/class/update:
    post:
      tags:
        - label
      summary: Update label class
      description: Update an existing label class
      operationId: updateLabelClass
      requestBody:
        description: Label class update request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLabelClassRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertLabelClassResponse'
  /label/class/delete:
    post:
      tags:
        - label
      summary: Delete label class
      description: Delete an existing label class
      operationId: deleteLabelClass
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLabelClassRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /label/instance/list:
    get:
      tags:
        - label
      summary: List labels
      description: List all label instances
      operationId: listLabelInstances
      parameters:
        - name: entityType
          in: query
          description: Entity type to retrieve
          schema:
            description: Label entity type
            $ref: '#/components/schemas/EntityType'
        - name: entityId
          in: query
          description: Entity type to retrieve
          schema:
            type: string
            example: cl-g30e1b80b5g1itbemc0g5jj3
        - name: classId
          in: query
          description: Label class ID
          schema:
            type: string
            example: lc-g30e1b80b5g1itbemc0g5jj3
        - name: value
          in: query
          description: Label value
          schema:
            type: string
            example: HotPotQA
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLabelInstancesResponse'
  /label/instance/new:
    post:
      tags:
        - label
      summary: Create new label instance
      description: Create new label instance
      operationId: createLabelInstance
      requestBody:
        description: Label instance creation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLabelInstanceRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertLabelInstanceResponse'
  /label/instance/update:
    post:
      tags:
        - label
      summary: Update label
      description: Update an existing label instance
      operationId: updateLabelInstance
      requestBody:
        description: Label update request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLabelInstanceRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertLabelInstanceResponse'
  /label/instance/delete:
    post:
      tags:
        - label
      summary: Delete label
      description: Delete an existing label
      operationId: deleteLabelInstance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLabelInstanceRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /action/list:
    get:
      tags:
        - action
      summary: List actions
      description: List all actions
      operationId: listActions
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListActionResponse'
  /action/result:
    get:
      tags:
        - action
      summary: Get action result
      description: Get action result by result ID
      operationId: getActionResult
      parameters:
        - name: resultId
          in: query
          description: Action result ID
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: Action result version
          required: false
          schema:
            type: number
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetActionResultResponse'
  /skill/list:
    get:
      tags:
        - skill
      summary: List skills
      description: List all skills
      operationId: listSkills
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSkillResponse'
  /skill/invoke:
    post:
      tags:
        - skill
      summary: Invoke skill
      description: Invoke a skill
      operationId: invokeSkill
      requestBody:
        description: Skill invocation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvokeSkillRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeSkillResponse'
  /skill/streamInvoke:
    post:
      tags:
        - skill
      summary: Stream invoke skill
      description: Invoke a skill and return SSE stream
      operationId: streamInvokeSkill
      requestBody:
        description: Skill invocation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvokeSkillRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            text/event-stream:
              schema:
                type: string
  /skill/instance/list:
    get:
      tags:
        - skill
      summary: List skill instances
      description: List skill instances for a user
      operationId: listSkillInstances
      parameters:
        - name: skillId
          in: query
          description: Skill ID
          schema:
            type: string
        - name: sortByPin
          in: query
          description: Whether to sort by pinned skill instances
          schema:
            type: boolean
            default: false
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSkillInstanceResponse'
  /skill/instance/new:
    post:
      tags:
        - skill
      summary: Create new skill instance
      description: Create a new skill instance for user
      operationId: createSkillInstance
      requestBody:
        description: Skill creation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSkillInstanceRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSkillInstanceResponse'
  /skill/instance/update:
    post:
      tags:
        - skill
      summary: Update skill instance
      description: Update an existing skill instance
      operationId: updateSkillInstance
      requestBody:
        description: Skill update request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSkillInstanceRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSkillInstanceResponse'
  /skill/instance/pin:
    post:
      tags:
        - skill
      summary: Pin skill instance
      description: Pin an existing skill instance
      operationId: pinSkillInstance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PinSkillInstanceRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /skill/instance/unpin:
    post:
      tags:
        - skill
      summary: Unpin skill instance
      description: Unpin an existing skill instance
      operationId: unpinSkillInstance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnpinSkillInstanceRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /skill/instance/delete:
    post:
      tags:
        - skill
      summary: Delete skill instance
      description: Delete an existing skill instance
      operationId: deleteSkillInstance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSkillInstanceRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /skill/trigger/list:
    get:
      tags:
        - skill
      summary: List skill triggers
      description: List all skill triggers
      operationId: listSkillTriggers
      parameters:
        - name: skillId
          in: query
          description: Skill ID
          schema:
            type: string
            example: sk-g30e1b80b5g1itbemc0g5jj3
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSkillTriggerResponse'
  /skill/trigger/new:
    post:
      tags:
        - skill
      summary: Create new trigger
      description: Create a new trigger
      operationId: createSkillTrigger
      requestBody:
        description: Skill trigger creation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSkillTriggerRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSkillTriggerResponse'
  /skill/trigger/update:
    post:
      tags:
        - skill
      summary: Update trigger
      description: Update an existing trigger
      operationId: updateSkillTrigger
      requestBody:
        description: Skill trigger update request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSkillTriggerRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSkillTriggerResponse'
  /skill/trigger/delete:
    post:
      tags:
        - skill
      summary: Delete trigger
      description: Delete an existing trigger
      operationId: deleteSkillTrigger
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSkillTriggerRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /user/settings:
    get:
      tags:
        - user
      summary: Get user settings
      description: Return settings for current user
      operationId: getSettings
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserSettingsResponse'
      security:
        - api_key: []
    put:
      tags:
        - user
      summary: Update user settings
      description: Update settings for current user
      operationId: updateSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserSettingsRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /user/checkSettingsField:
    get:
      tags:
        - user
      summary: Check settings field
      description: Given a settings field, check if the given value is valid
      operationId: checkSettingsField
      parameters:
        - name: field
          in: query
          description: Settings field
          required: true
          schema:
            type: string
            enum:
              - name
              - email
        - name: value
          in: query
          description: Field value
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckSettingsFieldResponse'
  /subscription/plans:
    get:
      tags:
        - subscription
      summary: Get subscription plans
      description: Get subscription plans
      operationId: getSubscriptionPlans
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSubscriptionPlansResponse'
  /subscription/usage:
    get:
      tags:
        - subscription
      summary: Get subscription usage
      description: Get subscription usage
      operationId: getSubscriptionUsage
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSubscriptionUsageResponse'
  /subscription/modelList:
    get:
      tags:
        - subscription
      summary: List models
      description: List all available models
      operationId: listModels
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelsResponse'
  /subscription/createCheckoutSession:
    post:
      tags:
        - subscription
      summary: Create checkout session
      description: Create a checkout session
      operationId: createCheckoutSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCheckoutSessionRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCheckoutSessionResponse'
  /subscription/createPortalSession:
    post:
      tags:
        - subscription
      summary: Create portal session
      description: Create a portal session
      operationId: createPortalSession
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePortalSessionResponse'
  /search:
    post:
      tags:
        - search
      summary: Search
      description: Search for canvases, resources, documents, etc.
      operationId: search
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
  /search/multilingualSearch:
    post:
      tags:
        - search
      summary: Multilingual Web Search
      description: Search web content across multiple languages
      operationId: multiLingualWebSearch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiLingualWebSearchRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiLingualWebSearchResponse'
  /misc/scrape:
    post:
      tags:
        - misc
      summary: Scrape
      description: Scrape a weblink
      operationId: scrape
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScrapeWeblinkRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScrapeWeblinkResponse'
  /misc/upload:
    post:
      tags:
        - misc
      summary: Upload
      description: Upload a file
      operationId: upload
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
  /misc/static/{fileName}:
    get:
      tags:
        - misc
      summary: Serve static
      description: Serve static files (only for local testing)
      operationId: serveStatic
      responses:
        '200':
          description: successful operation
  /misc/convert:
    post:
      tags:
        - misc
      summary: Convert between formats
      description: Convert content between different formats (e.g., HTML to Markdown)
      operationId: convert
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ConvertRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvertResponse'
components:
  schemas:
    User:
      type: object
      description: Refly user, used as JWT payload
      required:
        - uid
      properties:
        uid:
          type: string
          description: UID
        email:
          type: string
          description: Email
    ShareUser:
      type: object
      description: Refly user in shared entity
      required:
        - uid
      properties:
        uid:
          type: string
          description: UID
        name:
          type: string
          description: User name
        nickname:
          type: string
          description: User nickname
        avatar:
          type: string
          description: User avatar
    ListOrder:
      type: string
      description: List order
      enum:
        - creationAsc
        - creationDesc
    ReferenceMeta:
      type: object
      description: Reference metadata
      properties:
        title:
          type: string
          description: Reference title
        url:
          type: string
          description: Reference URL
    BaseReference:
      type: object
      description: Basic reference info
      required:
        - sourceType
        - sourceId
        - targetType
        - targetId
      properties:
        sourceType:
          $ref: '#/components/schemas/ReferenceType'
          description: Source entity type
        sourceId:
          type: string
          description: Source entity ID
        targetType:
          $ref: '#/components/schemas/ReferenceType'
          description: Target entity type
        targetId:
          type: string
          description: Target entity ID
    CanvasStatus:
      type: string
      description: Canvas status
      enum:
        - ready
        - duplicating
        - duplicate_failed
    Canvas:
      type: object
      required:
        - canvasId
        - title
        - createdAt
        - updatedAt
      properties:
        canvasId:
          type: string
          description: Canvas ID
          example: c-g30e1b80b5g1itbemc0g5jj3
        title:
          type: string
          description: Canvas title
          example: My canvas
        readOnly:
          type: boolean
          description: Whether this canvas is read-only
        status:
          type: string
          description: Canvas status
          $ref: '#/components/schemas/CanvasStatus'
        minimapUrl:
          type: string
          description: Minimap URL
        minimapStorageKey:
          type: string
          description: Minimap storage key
        createdAt:
          type: string
          format: date-time
          description: Canvas creation time
        updatedAt:
          type: string
          format: date-time
          description: Canvas update time
    CanvasTemplateCategory:
      type: object
      required:
        - categoryId
        - name
        - labelDict
        - descriptionDict
      properties:
        categoryId:
          type: string
          description: Category ID
        name:
          type: string
          description: Category name
        labelDict:
          type: object
          description: Category label dictionary
          additionalProperties:
            type: string
        descriptionDict:
          type: object
          description: Category description dictionary
          additionalProperties:
            type: string
    CanvasTemplate:
      type: object
      required:
        - templateId
        - shareId
        - title
        - description
        - language
        - createdAt
        - updatedAt
      properties:
        templateId:
          type: string
          description: Canvas template ID
          example: ct-g30e1b80b5g1itbemc0g5jj3
        shareId:
          type: string
          description: Share ID
          example: can-g30e1b80b5g1itbemc0g5jj3
        shareUser:
          description: Share user
          $ref: '#/components/schemas/ShareUser'
        version:
          type: integer
          description: Canvas template version
        category:
          description: Canvas template category
          $ref: '#/components/schemas/CanvasTemplateCategory'
        title:
          type: string
          description: Canvas template title
        description:
          type: string
          description: Canvas template description
        language:
          type: string
          description: Canvas template language code
        createdAt:
          type: string
          format: date-time
          description: Canvas template creation time
        updatedAt:
          type: string
          format: date-time
          description: Canvas template update time
    Reference:
      allOf:
        - $ref: '#/components/schemas/BaseReference'
        - type: object
          description: Reference extra data
          required:
            - referenceId
          properties:
            referenceId:
              type: string
              description: Reference ID
            sourceMeta:
              $ref: '#/components/schemas/ReferenceMeta'
              description: Source entity metadata
            targetMeta:
              $ref: '#/components/schemas/ReferenceMeta'
              description: Target entity metadata
    ResourceMeta:
      type: object
      description: Resource metadata
      properties:
        url:
          type: string
          description: Weblink URL
          example: https://www.google.com
        title:
          type: string
          description: Weblink title
          example: Google
        contentType:
          type: string
          description: File content type (MIME type)
          example: application/pdf
    ResourceType:
      type: string
      description: Resource type
      enum:
        - weblink
        - text
        - file
    IndexError:
      type: object
      description: Error message for resource indexing
      properties:
        type:
          type: string
          description: Error type
          enum:
            - pageLimitExceeded
            - unknownError
        metadata:
          type: object
          description: Error metadata
    Resource:
      type: object
      required:
        - resourceId
        - resourceType
        - title
      properties:
        resourceId:
          type: string
          description: Resource ID (empty if it's external)
          example: r-g30e1b80b5g1itbemc0g5jj3
        resourceType:
          description: Resource type
          $ref: '#/components/schemas/ResourceType'
        title:
          type: string
          description: Resource title
        data:
          type: object
          description: Resource metadata
          $ref: '#/components/schemas/ResourceMeta'
        indexStatus:
          description: Resource index status
          $ref: '#/components/schemas/IndexStatus'
        indexError:
          description: Error message for resource indexing
          $ref: '#/components/schemas/IndexError'
        storageSize:
          type: string
          description: Resource storage size (in bytes)
        vectorSize:
          type: string
          description: Resource vector storage size (in bytes)
        rawFileKey:
          type: string
          description: Raw file storage key (used to download the file)
          deprecated: true
        createdAt:
          type: string
          format: date-time
          description: Resource creation time
        updatedAt:
          type: string
          format: date-time
          description: Resource update time
        contentPreview:
          type: string
          description: Preview content for this resource
        content:
          type: string
          description: Document content for this resource (only returned in getResourceDetail API)
        downloadURL:
          type: string
          description: Download URL for this resource (for file type only)
    ReferenceType:
      type: string
      description: Reference type
      enum:
        - document
        - resource
    Document:
      type: object
      required:
        - docId
        - title
      properties:
        docId:
          type: string
          description: Document ID
          example: d-g30e1b80b5g1itbemc0g5jj3
        title:
          type: string
          description: Document title
          example: My document
        contentPreview:
          type: string
          description: Document content preview
        content:
          type: string
          description: Full document content (only returned in detail api)
        readOnly:
          type: boolean
          description: Whether this document is read-only
        createdAt:
          type: string
          format: date-time
          description: Document creation time
        updatedAt:
          type: string
          format: date-time
          description: Document update time
    EntityType:
      type: string
      description: Entity type
      enum:
        - document
        - resource
        - canvas
        - share
        - user
        - project
        - skillResponse
        - codeArtifact
    Entity:
      type: object
      description: Entity
      properties:
        entityId:
          type: string
          description: Entity ID
        entityType:
          description: Entity type
          $ref: '#/components/schemas/EntityType'
    ProjectSource:
      type: object
      description: Project source
      properties:
        entityId:
          type: string
          description: Entity ID
        entityType:
          description: Entity type
          $ref: '#/components/schemas/EntityType'
        title:
          type: string
          description: Project title
        createdAt:
          type: string
          format: date-time
          description: Project creation time
        updatedAt:
          type: string
          format: date-time
          description: Project update time
    Project:
      type: object
      description: Project
      required:
        - projectId
        - name
      properties:
        projectId:
          type: string
          description: Project ID
        name:
          type: string
          description: Project name
        description:
          type: string
          description: Project description
        coverUrl:
          type: string
          description: Project cover URL
        customInstructions:
          type: string
          description: Custom instructions for the project
        createdAt:
          type: string
          format: date-time
          description: Project creation time
        updatedAt:
          type: string
          format: date-time
          description: Project update time
    LabelClass:
      type: object
      description: Label class
      required:
        - labelClassId
        - name
        - displayName
        - createdAt
        - updatedAt
      properties:
        labelClassId:
          type: string
          description: Label class ID
          example: lc-g30e1b80b5g1itbemc0g5jj3
        name:
          type: string
          description: Label class name
          example: Related Dataset
        displayName:
          type: string
          description: Label class display name
          example: Label display name
        icon:
          description: Label icon
          $ref: '#/components/schemas/Icon'
        prompt:
          type: string
          description: Label creation instruction prompt
          example: Extract labels for the tech-related keywords
        createdAt:
          type: string
          format: date-time
          description: Label class creation time
        updatedAt:
          type: string
          format: date-time
          description: Label class update time
    LabelInstance:
      type: object
      description: Label instances related to entities
      required:
        - labelId
        - labelClassId
        - value
      properties:
        labelId:
          type: string
          description: Label instance ID
          example: lb-g30e1b80b5g1itbemc0g5jj3
        labelClassId:
          type: string
          description: Label class ID
          example: lc-g30e1b80b5g1itbemc0g5jj3
        labelClass:
          description: Label class
          $ref: '#/components/schemas/LabelClass'
        value:
          type: string
          description: Label value
          example: HotPotQA
    InputMode:
      type: string
      description: Data input mode
      enum:
        - input
        - inputNumber
        - inputTextArea
        - select
        - multiSelect
        - radio
        - switch
    ConfigScope:
      type: array
      description: Config scope
      items:
        type: string
        enum: [runtime, template]
    SelectOption:
      type: object
      description: Select option
      required:
        - value
      properties:
        value:
          type: string
          description: Option value
        labelDict:
          type: object
          description: Option label (key is locale, value is label)
          additionalProperties:
            type: string
        disabled:
          type: boolean
          description: Whether this option is disabled
          default: false
    DynamicConfigItem:
      type: object
      description: Dynamic config item
      required:
        - key
        - inputMode
        - labelDict
        - descriptionDict
      properties:
        key:
          type: string
          description: Config key
        inputMode:
          description: Config input mode
          $ref: '#/components/schemas/InputMode'
        required:
          type: object
          description: Specifies whether this config is required and in which contexts
          properties:
            value:
              type: boolean
              description: Whether this config is required
              default: false
            configScope:
              description: The contexts in which the requirement applies
              $ref: '#/components/schemas/ConfigScope'
          default:
            value: false
            scope: [runtime, template]
        labelDict:
          type: object
          description: Config label (key is locale, value is label)
          additionalProperties:
            type: string
        descriptionDict:
          type: object
          description: Config description (key is locale, value is description)
          additionalProperties:
            type: string
        defaultValue:
          description: Default value
          oneOf:
            - type: number
            - type: string
            - type: boolean
            - type: array
              items:
                type: string
        options:
          type: array
          description: Config options
          items:
            $ref: '#/components/schemas/SelectOption'
        inputProps:
          type: object
          description: Additional input properties
          properties:
            min:
              type: number
              description: Minimum value for number input
            max:
              type: number
              description: Maximum value for number input
            step:
              type: number
              description: Step value for number input
            precision:
              type: number
              description: Decimal precision for number input
    DynamicConfigValue:
      type: object
      description: Dynamic config value
      required:
        - label
        - value
        - displayValue
      properties:
        label:
          type: string
          description: Config key label
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean
            - type: array
              items:
                type: string
            - type: object
              additionalProperties: true
          description: Config value
        displayValue:
          type: string
          description: Config display value
        configScope:
          description: The contexts in which the requirement applies
          $ref: '#/components/schemas/ConfigScope'
    SkillTemplateConfigDefinition:
      type: object
      description: Skill template config schema
      required:
        - items
      properties:
        items:
          type: array
          description: Config items
          items:
            $ref: '#/components/schemas/DynamicConfigItem'
    IconType:
      type: string
      description: Icon type
      enum:
        - emoji
        - image
    Icon:
      type: object
      description: Icon
      required:
        - type
        - value
      properties:
        type:
          description: Icon type
          $ref: '#/components/schemas/IconType'
        value:
          type: string
          description: Icon value
    Skill:
      type: object
      description: Skill
      required:
        - name
      properties:
        name:
          type: string
          description: Skill name
        description:
          type: string
          description: Skill description
        icon:
          description: Skill icon
          $ref: '#/components/schemas/Icon'
        configSchema:
          description: Skill config schema
          $ref: '#/components/schemas/SkillTemplateConfigDefinition'
        tplConfig:
          description: Skill template config
          $ref: '#/components/schemas/SkillTemplateConfig'
    SkillTriggerType:
      type: string
      description: Skill trigger type
      enum:
        - timer
        - simpleEvent
    SimpleEventName:
      type: string
      description: Simple event name
      enum:
        - onResourceReady
    SimpleEvent:
      type: object
      required:
        - name
        - displayName
        - provideContextKeys
      properties:
        name:
          description: Simple event name
          $ref: '#/components/schemas/SimpleEventName'
        displayName:
          type: object
          description: Simple event display name (key is locale, value is display name)
        provideContextKeys:
          type: array
          description: Context keys to provide
          items:
            $ref: '#/components/schemas/SkillContextKey'
    TimerInterval:
      type: string
      description: Timer interval
      enum:
        - hour
        - day
        - week
        - month
        - year
    TimerTriggerConfig:
      type: object
      required:
        - datetime
      properties:
        datetime:
          type: string
          format: date-time
          description: Time to run
        repeatInterval:
          type: string
          description: Repeat interval
          $ref: '#/components/schemas/TimerInterval'
    SkillTrigger:
      type: object
      description: Skill triggers
      required:
        - skillId
        - displayName
        - triggerId
        - triggerType
        - enabled
        - createdAt
        - updatedAt
      properties:
        skillId:
          type: string
          description: Skill ID
          example: sk-g30e1b80b5g1itbemc0g5jj3
        displayName:
          type: string
          description: Trigger display name
          example: My trigger
        triggerId:
          type: string
          description: Trigger ID
          example: tr-g30e1b80b5g1itbemc0g5jj3
        triggerType:
          description: Trigger type
          $ref: '#/components/schemas/SkillTriggerType'
        simpleEventName:
          description: Simple event name (only required when trigger type is `simpleEvent`)
          $ref: '#/components/schemas/SimpleEventName'
        timerConfig:
          description: Timer config (only required when trigger type is `timer`)
          $ref: '#/components/schemas/TimerTriggerConfig'
        input:
          description: Skill input
          $ref: '#/components/schemas/SkillInput'
        context:
          description: Skill context
          $ref: '#/components/schemas/SkillContext'
        tplConfig:
          description: Skill template config
          $ref: '#/components/schemas/SkillTemplateConfig'
        enabled:
          type: boolean
          description: Trigger enabled
        createdAt:
          type: string
          format: date-time
          description: Trigger creation time
        updatedAt:
          type: string
          format: date-time
          description: Trigger update time
    SkillMeta:
      type: object
      description: Skill metadata
      required:
        - name
      properties:
        name:
          type: string
          description: Skill name
        icon:
          description: Skill icon
          $ref: '#/components/schemas/Icon'
    ActionMeta:
      type: object
      description: Action metadata
      properties:
        type:
          type: string
          description: Action type
          $ref: '#/components/schemas/ActionType'
        name:
          type: string
          description: Action name
        icon:
          description: Action icon
          $ref: '#/components/schemas/Icon'
    SkillRuntimeConfig:
      type: object
      description: Skill runtime config
      properties:
        disableLinkParsing:
          type: boolean
          description: Whether to disable link parsing for input query
    SkillTemplateConfig:
      type: object
      description: Skill template config (key is config item key, value is config value)
      additionalProperties:
        description: Skill template config value
        $ref: '#/components/schemas/DynamicConfigValue'
    ActionConfig:
      type: object
      description: Action config (key is config item key, value is config value)
      additionalProperties:
        description: Skill template config value
        $ref: '#/components/schemas/DynamicConfigValue'
    SkillInstance:
      type: object
      description: Skill
      allOf:
        - $ref: '#/components/schemas/SkillMeta'
        - type: object
          required:
            - createdAt
            - updatedAt
            - invocationConfig
          properties:
            description:
              type: string
              description: Skill instance description
            promptHint:
              type: string
              description: Skill instance prompt hint
            tplConfig:
              description: Skill template config
              $ref: '#/components/schemas/SkillTemplateConfig'
            tplConfigSchema:
              description: Skill template config schema
              $ref: '#/components/schemas/SkillTemplateConfigDefinition'
            invocationConfig:
              description: Skill invocation config
              $ref: '#/components/schemas/SkillInvocationConfig'
            pinnedAt:
              type: string
              format: date-time
              description: Skill pinned time
            createdAt:
              type: string
              format: date-time
              description: Skill creation time
            updatedAt:
              type: string
              format: date-time
              description: Skill update time
    SourceMeta:
      type: object
      description: Source metadata
      properties:
        source:
          type: string
          description: Source URL
          deprecated: true
        title:
          type: string
          description: Source title
          deprecated: true
        publishedTime:
          type: string
          format: date-time
          description: Source publish timesss
        entityId:
          type: string
          description: Related entity ID
        entityType:
          type: string
          description: Related entity type
        originalLocale:
          type: string
          description: Original locale
        translatedDisplayLocale:
          type: string
          description: Translated display locale
        isTranslated:
          type: boolean
          description: Whether the source is translated
        originalQuery:
          type: string
          description: Original query
        translatedQuery:
          type: string
          description: Translated query
        sourceType:
          type: string
          description: Source type
          enum:
            - webSearch
            - library
    SourceSelection:
      type: object
      description: Source selection
      required:
        - content
        - type
      properties:
        xPath:
          type: string
          description: Selected xPath
          deprecated: true
        content:
          type: string
          description: Selected content
        type:
          type: string
          description: Selection type
          enum:
            - text
            - table
            - link
            - image
            - video
            - audio
    Source:
      type: object
      description: Source of the message
      required:
        - pageContent
      properties:
        url:
          type: string
          description: Source URL
        title:
          type: string
          description: Source title
        pageContent:
          type: string
          description: Source content
        score:
          type: number
          description: Relativity score
        metadata:
          type: object
          description: Source metadata
          $ref: '#/components/schemas/SourceMeta'
        selections:
          type: array
          description: Source selections
          items:
            $ref: '#/components/schemas/SourceSelection'
    SearchStep:
      type: object
      description: Search step
      properties:
        step:
          type: string
          description: Search step name
        duration:
          type: number
          description: Step duration in milliseconds
        result:
          type: object
          description: Step-specific result data
    ModelTier:
      type: string
      description: Model tier
      enum:
        - t1
        - t2
        - free
    TokenUsageItem:
      type: object
      description: Token usage item
      required:
        - tier
        - modelName
        - modelProvider
        - inputTokens
        - outputTokens
      properties:
        tier:
          type: string
          description: Model tier
        modelName:
          type: string
          description: Model name
        modelProvider:
          type: string
          description: Model provider
        inputTokens:
          type: number
          description: Input tokens
        outputTokens:
          type: number
          description: Output tokens
    ActionStatus:
      type: string
      description: Action status
      enum:
        - waiting
        - executing
        - finish
        - failed
    ArtifactType:
      type: string
      description: Artifact type
      enum:
        - document
        - codeArtifact
    ArtifactStatus:
      type: string
      description: Artifact status
      enum:
        - waiting
        - generating
        - finish
        - failed
    Artifact:
      type: object
      description: Artifact
      required:
        - type
        - entityId
        - title
      properties:
        type:
          type: string
          description: Artifact type
          $ref: '#/components/schemas/ArtifactType'
        entityId:
          type: string
          description: Entity ID
        title:
          type: string
          description: Artifact title
        status:
          description: Artifact status
          $ref: '#/components/schemas/ArtifactStatus'
        content:
          type: string
          description: Artifact content
        metadata:
          type: object
          description: Artifact metadata
        createdAt:
          type: string
          format: date-time
          description: Artifact creation time
        updatedAt:
          type: string
          format: date-time
          description: Artifact update time
    ActionStepMeta:
      type: object
      description: Action step metadata
      required:
        - name
      properties:
        name:
          type: string
          description: Step name
    ActionLog:
      type: object
      description: Action log
      required:
        - key
      properties:
        key:
          type: string
          description: Log key
        titleArgs:
          type: object
          description: Log title arguments
        descriptionArgs:
          type: object
          description: Log description arguments
    ActionStep:
      type: object
      description: Action step
      required:
        - name
        - status
      properties:
        name:
          type: string
          description: Step name
        content:
          type: string
          description: Step content
        reasoningContent:
          type: string
          description: Step reasoning content
        artifacts:
          type: array
          description: Step artifacts
          items:
            $ref: '#/components/schemas/Artifact'
        structuredData:
          type: object
          description: Step structured data output
          example:
            sources: [Source]
            relatedQuestions: [string]
        logs:
          type: array
          description: Action step logs
          items:
            $ref: '#/components/schemas/ActionLog'
        tokenUsage:
          type: array
          description: Token usage
          items:
            $ref: '#/components/schemas/TokenUsageItem'
    CodeArtifactType:
      type: string
      description: Code artifact type
      enum:
        - application/refly.artifacts.react
        - image/svg+xml
        - application/refly.artifacts.mermaid
        - text/markdown
        - application/refly.artifacts.code
        - text/html
        - application/refly.artifacts.mindmap
    CodeArtifact:
      type: object
      description: Code artifact
      required:
        - type
        - artifactId
        - title
      properties:
        type:
          type: string
          description: Artifact type
          $ref: '#/components/schemas/CodeArtifactType'
        artifactId:
          type: string
          description: Artifact ID
        title:
          type: string
          description: Artifact title
        content:
          type: string
          description: Code artifact content
        language:
          type: string
          description: Code artifact language
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ActionResult:
      type: object
      description: Action result
      required:
        - resultId
      properties:
        resultId:
          type: string
          readOnly: true
          description: Action result ID
          example: ar-g30e1b80b5g1itbemc0g5jj3
        version:
          type: number
          description: Action result version
        title:
          type: string
          description: Action result title
        input:
          description: Action input
          $ref: '#/components/schemas/SkillInput'
        tier:
          description: Model tier
          $ref: '#/components/schemas/ModelTier'
        status:
          type: string
          description: Step status
          $ref: '#/components/schemas/ActionStatus'
        type:
          description: Action type
          $ref: '#/components/schemas/ActionType'
        modelInfo:
          description: Selected model
          $ref: '#/components/schemas/ModelInfo'
        targetType:
          description: Action target type
          $ref: '#/components/schemas/EntityType'
        targetId:
          type: string
          description: Action target ID
        actionMeta:
          type: object
          description: Action metadata
          $ref: '#/components/schemas/ActionMeta'
        context:
          type: object
          description: Action context
          $ref: '#/components/schemas/SkillContext'
        tplConfig:
          type: object
          description: Action template config
          $ref: '#/components/schemas/SkillTemplateConfig'
        runtimeConfig:
          type: object
          description: Action runtime config
          $ref: '#/components/schemas/SkillRuntimeConfig'
        history:
          type: array
          description: Action result history
          items:
            $ref: '#/components/schemas/ActionResult'
        steps:
          type: array
          description: Action steps
          items:
            $ref: '#/components/schemas/ActionStep'
        errors:
          type: array
          description: Errors
          items:
            type: string
        createdAt:
          type: string
          format: date-time
          description: Message creation time
        updatedAt:
          type: string
          format: date-time
          description: Message update time
    IndexStatus:
      type: string
      description: Resource index status
      enum:
        - init
        - wait_parse
        - wait_index
        - finish
        - parse_failed
        - index_failed
    SubscriptionInterval:
      type: string
      description: Payment recurring interval
      enum:
        - monthly
        - yearly
    SubscriptionPlanType:
      type: string
      description: Subscription plan type
      enum:
        - free
        - plus
        - pro
        - max
        - ultra
    SubscriptionStatus:
      type: string
      description: Subscription status
      enum:
        - active
        - canceled
        - incomplete
        - incomplete_expired
        - past_due
        - paused
        - trialing
        - unpaid
    Subscription:
      type: object
      required:
        - subscriptionId
        - planType
        - status
      properties:
        subscriptionId:
          type: string
          description: Subscription ID
        planType:
          type: string
          description: Subscription plan type
          $ref: '#/components/schemas/SubscriptionPlanType'
        interval:
          description: Payment recurring interval
          $ref: '#/components/schemas/SubscriptionInterval'
        status:
          type: string
          description: Subscription status
          $ref: '#/components/schemas/SubscriptionStatus'
        isTrial:
          type: boolean
          description: Whether the subscription is a trial
        cancelAt:
          type: string
          format: date-time
          description: Subscription cancel time
    TokenUsageMeter:
      type: object
      required:
        - meterId
        - uid
        - startAt
        - t1TokenQuota
        - t1TokenUsed
        - t2TokenQuota
        - t2TokenUsed
      properties:
        meterId:
          type: string
          description: Token usage meter ID
        uid:
          type: string
          description: User ID
        subscriptionId:
          type: string
          description: Subscription ID
        startAt:
          type: string
          format: date-time
          description: Token usage meter start time
        endAt:
          type: string
          format: date-time
          description: Token usage meter end time
        t1CountQuota:
          type: number
          description: Request count quota (T1)
          example: 1000000
        t1CountUsed:
          type: number
          description: Request count used (T1)
          example: 100000
        t1TokenQuota:
          type: number
          description: Token quota (T1)
          example: 1000000
          deprecated: true
        t1TokenUsed:
          type: number
          description: Token used (T1)
          example: 100000
          deprecated: true
        t2CountQuota:
          type: number
          description: Request count quota (T2)
          example: 1000000
        t2CountUsed:
          type: number
          description: Request count used (T2)
          example: 100000
        t2TokenQuota:
          type: number
          description: Token quota (T2)
          example: 1000000
          deprecated: true
        t2TokenUsed:
          type: number
          description: Token used (T2)
          example: 100000
          deprecated: true
    StorageUsageMeter:
      type: object
      required:
        - meterId
        - uid
        - objectStorageQuota
        - resourceSize
        - canvasSize
        - fileSize
        - vectorStorageQuota
        - vectorStorageUsed
      properties:
        meterId:
          type: string
          description: Storage usage meter ID
        uid:
          type: string
          description: User ID
        subscriptionId:
          type: string
          description: Subscription ID
        fileCountUsed:
          type: number
          description: File count used
          example: 100
        fileCountQuota:
          type: number
          description: File count quota
          example: 1000
        objectStorageQuota:
          type: string
          description: Object storage quota (in bytes), including resource, canvas and static files
          example: '104857600'
          deprecated: true
        resourceSize:
          type: string
          description: Resource storage size in use (in bytes)
          example: '1048576'
          deprecated: true
        canvasSize:
          type: string
          description: Canvas storage size in use (in bytes)
          example: '1048576'
          deprecated: true
        fileSize:
          type: string
          description: Static file storage size in use (in bytes)
          example: '1048576'
          deprecated: true
        vectorStorageQuota:
          type: string
          description: Vector storage quota (in bytes)
          example: '1048576'
          deprecated: true
        vectorStorageUsed:
          type: string
          description: Vector storage size used (in bytes)
          example: '1048576'
          deprecated: true
    FileParsingMeter:
      type: object
      required:
        - pagesParsed
        - pagesLimit
      properties:
        pagesParsed:
          type: number
          description: File pages parsed
        pagesLimit:
          type: number
          description: File pages limit
        fileUploadLimit:
          type: number
          description: File upload limit (in MB)
    OperationMode:
      type: string
      description: Operation mode
      enum:
        - mouse
        - touchpad
    UserPreferences:
      type: object
      description: User preferences
      properties:
        operationMode:
          type: string
          description: Operation mode
          $ref: '#/components/schemas/OperationMode'
        disableHoverCard:
          type: boolean
          description: Whether to disable hover tutorial
          default: false
    OnboardingStatus:
      type: string
      description: Onboarding status
      enum:
        - not_started
        - skipped
        - completed
    OnboardingConfig:
      type: object
      properties:
        settings:
          description: Settings onboarding status
          $ref: '#/components/schemas/OnboardingStatus'
        tour:
          description: Tour onboarding status
          $ref: '#/components/schemas/OnboardingStatus'
    UserSettings:
      type: object
      required:
        - uid
        - avatar
        - name
        - email
      properties:
        uid:
          type: string
          description: User ID
          example: u-g30e1b80b5g1itbemc0g5jj3
        avatar:
          type: string
          description: User avatar
          example: https://static.refly.ai/avatar/1.jpg
        name:
          type: string
          description: Username (can only contains letters, numbers, and underscores)
          example: john_doe
        nickname:
          type: string
          description: User nickname
          example: John Doe
        email:
          type: string
          description: User email
          example: 6XJpZ@example.com
        emailVerified:
          type: boolean
          description: Whether email is verified
          default: false
        uiLocale:
          type: string
          description: User UI locale
          example: en
        outputLocale:
          type: string
          description: User output locale
          example: en
        customerId:
          type: string
          description: Stripe customer ID
        subscription:
          description: User subscription
          $ref: '#/components/schemas/Subscription'
        hasBetaAccess:
          type: boolean
          description: Whether the user has beta access
          default: false
        preferences:
          description: User preferences
          $ref: '#/components/schemas/UserPreferences'
        onboarding:
          description: Onboarding config
          $ref: '#/components/schemas/OnboardingConfig'
    AuthProvider:
      type: string
      description: Auth provider
      enum:
        - email
        - google
        - github
    AuthConfigItem:
      type: object
      required:
        - provider
      properties:
        provider:
          description: Auth provider
          $ref: '#/components/schemas/AuthProvider'
    AuthConfigResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Auth providers
              items:
                $ref: '#/components/schemas/AuthConfigItem'
    EmailSignupRequest:
      type: object
      description: Email signup request
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: Email
        password:
          type: string
          description: Password
    EmailSignupData:
      type: object
      properties:
        sessionId:
          type: string
          description: Verification session ID
        skipVerification:
          type: boolean
          description: Whether email verification is skipped
    EmailSignupResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/EmailSignupData'
    VerificationPurpose:
      type: string
      description: Verification purpose
      enum:
        - signup
        - resetPassword
    CreateVerificationRequest:
      type: object
      description: Create verification session request
      required:
        - email
        - purpose
      properties:
        email:
          type: string
          description: Email
        purpose:
          type: string
          description: Verification purpose
          $ref: '#/components/schemas/VerificationPurpose'
        password:
          type: string
          description: Password
    CreateVerificationData:
      type: object
      properties:
        sessionId:
          type: string
          description: Verification session ID
    CreateVerificationResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/CreateVerificationData'
    ResendVerificationRequest:
      type: object
      description: Resend verification request
      required:
        - sessionId
      properties:
        sessionId:
          type: string
          description: Verification session ID
    CheckVerificationRequest:
      type: object
      description: Check verification code request
      required:
        - sessionId
        - code
      properties:
        sessionId:
          type: string
          description: Verification session ID
        code:
          type: string
          description: Verification code
    EmailLoginRequest:
      type: object
      description: Email login request
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: Email
        password:
          type: string
          description: Password
    EmailLoginData:
      type: object
      properties:
        accessToken:
          type: string
          description: Access token
    EmailLoginResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/EmailLoginData'
    GetUserSettingsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/UserSettings'
    CollabTokenData:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: Collab token
        expiresAt:
          type: number
          description: Token expiration time (in unix milliseconds)
    GetCollabTokenResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/CollabTokenData'
    BaseResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          description: Whether the operation was successful
          example: true
        errCode:
          type: string
          description: Error code
        errMsg:
          type: string
          description: Error message
          example: Operation failed
        traceId:
          type: string
          description: Trace ID
        stack:
          type: string
          description: Error stack (only returned in development environment)
    ListCanvasResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Canvas list
              items:
                $ref: '#/components/schemas/Canvas'
    GetCanvasDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Canvas'
    RawCanvasData:
      type: object
      description: Raw canvas data
      properties:
        owner:
          type: object
          description: Canvas owner
          $ref: '#/components/schemas/ShareUser'
        title:
          type: string
          description: Canvas title
        minimapUrl:
          type: string
          description: Minimap URL
        nodes:
          type: array
          description: Canvas nodes
          items:
            type: object
            $ref: '#/components/schemas/CanvasNode'
        edges:
          type: array
          description: Canvas edges
          items:
            type: object
    ExportCanvasResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Canvas data
              $ref: '#/components/schemas/RawCanvasData'
    DuplicateCanvasRequest:
      type: object
      required:
        - canvasId
      properties:
        canvasId:
          type: string
          description: Canvas ID to duplicate
        title:
          type: string
          description: Custom canvas title
        projectId:
          type: string
          description: Project ID to bind with
        duplicateEntities:
          type: boolean
          description: Whether to duplicate entities within the canvas
    DuplicateDocumentRequest:
      type: object
      required:
        - docId
      properties:
        docId:
          type: string
          description: Document ID to duplicate
        title:
          type: string
          description: Custom document title for the duplicate
    DuplicateResourceRequest:
      type: object
      required:
        - resourceId
      properties:
        resourceId:
          type: string
          description: Resource ID to duplicate
        title:
          type: string
          description: Custom resource title for the duplicate
    UpsertCanvasRequest:
      type: object
      properties:
        title:
          type: string
          description: Canvas title
          example: My Canvas
        canvasId:
          type: string
          description: Canvas ID (only used for update)
          example: c-g30e1b80b5g1itbemc0g5jj3
        projectId:
          type: string
          description: Project ID to bind with
        minimapStorageKey:
          type: string
          description: Minimap storage key
    UpsertCanvasResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Canvas'
    DeleteCanvasRequest:
      type: object
      required:
        - canvasId
      properties:
        canvasId:
          type: string
          description: Canvas ID to delete
          example: c-g30e1b80b5g1itbemc0g5jj3
        deleteAllFiles:
          type: boolean
          description: Whether to delete all files in the canvas
          default: false
    AutoNameCanvasRequest:
      type: object
      required:
        - canvasId
      properties:
        canvasId:
          type: string
          description: Canvas ID
        directUpdate:
          type: boolean
          description: Whether to directly update the canvas title
          default: false
    AutoNameCanvasResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Auto name canvas result
              properties:
                title:
                  type: string
                  description: New canvas title
    ListCanvasTemplateResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Canvas template list
              items:
                $ref: '#/components/schemas/CanvasTemplate'
    CreateCanvasTemplateRequest:
      type: object
      required:
        - canvasId
        - title
        - description
        - language
      properties:
        canvasId:
          type: string
          description: Canvas ID
        title:
          type: string
          description: Canvas template title
        description:
          type: string
          description: Canvas template description
        categoryId:
          type: string
          description: Canvas template category ID
        language:
          type: string
          description: Canvas template language code
        coverStorageKey:
          type: string
          description: Cover storage key
    UpdateCanvasTemplateRequest:
      type: object
      required:
        - templateId
      properties:
        templateId:
          type: string
          description: Canvas template ID
        title:
          type: string
          description: Canvas template title
        description:
          type: string
          description: Canvas template description
        categoryId:
          type: string
          description: Canvas template category ID
        language:
          type: string
          description: Canvas template language code
    UpsertCanvasTemplateResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              description: Canvas template
              $ref: '#/components/schemas/CanvasTemplate'
    ListCanvasTemplateCategoryResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Canvas template category list
              items:
                $ref: '#/components/schemas/CanvasTemplateCategory'
    UpsertResourceRequest:
      type: object
      required:
        - title
        - resourceType
      properties:
        title:
          type: string
          description: Resource title
          example: My Resource
        resourceType:
          description: Resource type
          $ref: '#/components/schemas/ResourceType'
        resourceId:
          type: string
          description: Resource ID (only used for update)
          example: r-g30e1b80b5g1itbemc0g5jj3
        projectId:
          type: string
          description: Project ID to bind with
        data:
          description: Resource metadata
          $ref: '#/components/schemas/ResourceMeta'
        storageKey:
          type: string
          description: Storage key
        content:
          type: string
          description: Resource content (this will be ignored if storageKey was set)
    UpsertResourceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Resource'
    BatchCreateResourceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Resource list
              items:
                $ref: '#/components/schemas/Resource'
    ReindexResourceRequest:
      type: object
      required:
        - resourceIds
      properties:
        resourceIds:
          type: array
          description: Resource ID list
          items:
            type: string
    ReindexResourceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Resource list
              items:
                $ref: '#/components/schemas/Resource'
    DeleteResourceRequest:
      type: object
      required:
        - resourceId
      properties:
        resourceId:
          type: string
          description: Resource ID to delete
          example: r-g30e1b80b5g1itbemc0g5jj3
    ListResourceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Resource list
              items:
                $ref: '#/components/schemas/Resource'
    GetResourceDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Resource data
              $ref: '#/components/schemas/Resource'
    ListDocumentResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Canvas list
              items:
                $ref: '#/components/schemas/Document'
    GetDocumentDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Document data
              $ref: '#/components/schemas/Document'
    UpsertDocumentRequest:
      type: object
      properties:
        title:
          type: string
          description: Canvas title
          example: My Canvas
        docId:
          type: string
          description: Document ID (only used for update)
          example: d-g30e1b80b5g1itbemc0g5jj3
        projectId:
          type: string
          description: Project ID to bind with
        readOnly:
          type: boolean
          description: Whether this document is read-only
          default: false
        initialContent:
          type: string
          description: Document initial content
    UpsertDocumentResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Document'
    DeleteDocumentRequest:
      type: object
      required:
        - docId
      properties:
        docId:
          type: string
          description: Document ID to delete
          example: d-g30e1b80b5g1itbemc0g5jj3
    GetActionResultResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ActionResult'
    QueryReferencesRequest:
      type: object
      properties:
        sourceType:
          description: Source entity type
          $ref: '#/components/schemas/EntityType'
        sourceId:
          type: string
          description: Source entity ID
        targetType:
          description: Target entity type
          $ref: '#/components/schemas/EntityType'
        targetId:
          type: string
          description: Target entity ID
    QueryReferencesResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Reference list
              items:
                $ref: '#/components/schemas/Reference'
    AddReferencesRequest:
      type: object
      required:
        - references
      properties:
        references:
          type: array
          description: Reference operation list
          items:
            $ref: '#/components/schemas/BaseReference'
    AddReferencesResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Reference list
              items:
                $ref: '#/components/schemas/Reference'
    DeleteReferencesRequest:
      type: object
      required:
        - referenceIds
      properties:
        referenceIds:
          type: array
          description: Reference ID list
          items:
            type: string
    ListProjectResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Project list
              items:
                $ref: '#/components/schemas/Project'
    GetProjectDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Project'
    UpsertProjectRequest:
      type: object
      properties:
        projectId:
          type: string
          description: Project ID (only used for update)
        name:
          type: string
          description: Project name
        description:
          type: string
          description: Project description
        coverStorageKey:
          type: string
          description: Project cover storage key
        customInstructions:
          type: string
          description: Custom instructions
    UpsertProjectResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Project'
    UpdateProjectItemsRequest:
      type: object
      properties:
        projectId:
          type: string
          description: Project ID
        operation:
          type: string
          description: Operation type
          enum:
            - add
            - remove
        items:
          type: array
          description: Item list
          items:
            $ref: '#/components/schemas/Entity'
    DeleteProjectRequest:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: string
          description: Project ID to delete
          example: p-g30e1b80b5g1itbemc0g5jj3
    DeleteProjectItemsRequest:
      type: object
      required:
        - projectId
        - items
      properties:
        projectId:
          type: string
          description: Project ID
        items:
          type: array
          description: Item list
          items:
            $ref: '#/components/schemas/Entity'
    SkillEventType:
      type: string
      description: Skill event type
      enum:
        - start
        - end
        - stream
        - log
        - artifact
        - structured_data
        - token_usage
        - create_node
        - error
    SkillEvent:
      type: object
      required:
        - event
      properties:
        event:
          description: Event type
          $ref: '#/components/schemas/SkillEventType'
        skillMeta:
          description: Skill metadata
          $ref: '#/components/schemas/SkillMeta'
        step:
          description: Action step metadata
          $ref: '#/components/schemas/ActionStepMeta'
        resultId:
          type: string
          description: Result ID
        version:
          type: number
          description: Result version
        content:
          type: string
          description: Event content. Only present when `event` is `stream`
        reasoningContent:
          type: string
          description: Reasoning content. Only present when `event` is `stream`
        tokenUsage:
          description: Token usage data. Only present when `event` is `token_usage`.
          $ref: '#/components/schemas/TokenUsageItem'
        log:
          description: Log data. Only present when `event` is `log`.
          $ref: '#/components/schemas/ActionLog'
        structuredData:
          type: object
          description: Structured data. Only present when `event` is `structured_data`.
        artifact:
          description: Artifact data. Only present when `event` is `artifact`.
          $ref: '#/components/schemas/Artifact'
        node:
          description: Canvas node data. Only present when `event` is `create_node`.
          $ref: '#/components/schemas/CanvasNode'
        error:
          description: Error data. Only present when `event` is `error`.
          $ref: '#/components/schemas/BaseResponse'
          deprecated: true
        originError:
          type: string
          description: Original error message. Only present when `event` is `error`.
    ShareRecord:
      type: object
      required:
        - shareId
        - entityType
        - entityId
      properties:
        shareId:
          type: string
          description: Share ID
        title:
          type: string
          description: Share title
        entityType:
          $ref: '#/components/schemas/EntityType'
          description: Entity type
        entityId:
          type: string
          description: Entity ID
        allowDuplication:
          type: boolean
          description: Whether to allow duplication of the shared entity
        parentShareId:
          type: string
          description: Parent share ID
        templateId:
          type: string
          description: Canvas template ID
        createdAt:
          type: string
          description: Create timestamp
        updatedAt:
          type: string
          description: Update timestamp
    UpsertCodeArtifactRequest:
      type: object
      properties:
        artifactId:
          type: string
          description: Code artifact ID (not needed for creation)
        title:
          type: string
          description: Code artifact title
        type:
          type: string
          description: Code artifact type
        content:
          type: string
          description: Code artifact content
        language:
          type: string
          description: Code artifact language
        previewStorageKey:
          type: string
          description: Code artifact preview storage key
        createIfNotExists:
          type: boolean
          description: Whether to create the code artifact if it does not exist
          default: false
    UpsertCodeArtifactResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/CodeArtifact'
    GetCodeArtifactDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/CodeArtifact'
    CreateShareRequest:
      type: object
      required:
        - entityType
        - entityId
      properties:
        entityType:
          $ref: '#/components/schemas/EntityType'
          description: Entity type
        entityId:
          type: string
          description: Entity ID
        title:
          type: string
          description: Share title
        allowDuplication:
          type: boolean
          description: Whether to allow duplication of the shared entity
          default: false
        parentShareId:
          type: string
          description: Parent share ID
        shareData:
          type: string
          description: Raw share data (JSON string)
        shareDataStorageKey:
          type: string
          description: Share data storage key
        coverStorageKey:
          type: string
          description: Cover storage key
    CreateShareResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ShareRecord'
              description: Share created
    ListShareResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Share record list
              items:
                $ref: '#/components/schemas/ShareRecord'
    DeleteShareRequest:
      type: object
      required:
        - shareId
      properties:
        shareId:
          type: string
          description: Share ID
    DuplicateShareRequest:
      type: object
      required:
        - shareId
      properties:
        shareId:
          type: string
          description: Share ID
    DuplicateShareResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              description: Duplicated entity
              $ref: '#/components/schemas/Entity'
    ListLabelClassesResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Label class list
              items:
                $ref: '#/components/schemas/LabelClass'
    CreateLabelClassRequest:
      type: object
      required:
        - name
        - displayName
        - prompt
      properties:
        name:
          type: string
          description: Label class name
          example: my_class
        displayName:
          type: string
          description: Label display name
          example: My Class
        icon:
          description: Label icon
          $ref: '#/components/schemas/Icon'
        prompt:
          type: string
          description: Label creation instruction prompt
          example: Extract labels for the tech-related keywords
    UpdateLabelClassRequest:
      type: object
      required:
        - labelClassId
      properties:
        labelClassId:
          type: string
          description: Label class ID
        name:
          type: string
          description: Label class name
          example: My Class
        displayName:
          type: string
          description: Label display name
          example: My Class
        icon:
          description: Label icon
          $ref: '#/components/schemas/Icon'
        prompt:
          type: string
          description: Label creation instruction prompt
          example: Extract labels for the tech-related keywords
    UpsertLabelClassResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              description: Label class upserted
              $ref: '#/components/schemas/LabelClass'
    DeleteLabelClassRequest:
      type: object
      required:
        - labelClassId
      properties:
        labelClassId:
          type: string
          description: Label class ID to delete
          example: lc-g30e1b80b5g1itbemc0g5jj3
    ListLabelInstancesResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Label list
              items:
                $ref: '#/components/schemas/LabelInstance'
    CreateLabelInstanceRequest:
      type: object
      required:
        - labelClassId
        - valueList
        - entityType
        - entityId
      properties:
        labelClassId:
          type: string
          description: Label class ID
          example: lc-g30e1b80b5g1itbemc0g5jj3
        valueList:
          type: array
          description: Label value list
          items:
            type: string
            example: label-1
        entityType:
          description: Label entity type
          $ref: '#/components/schemas/EntityType'
        entityId:
          description: Label entity ID
          type: string
    UpdateLabelInstanceRequest:
      type: object
      properties:
        labelId:
          type: string
          description: Label ID to update
        value:
          type: string
          description: Updated label value
    UpsertLabelInstanceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Label instance upserted
              items:
                $ref: '#/components/schemas/LabelInstance'
    DeleteLabelInstanceRequest:
      type: object
      required:
        - labelId
      properties:
        labelId:
          type: string
          description: Label ID to delete
          example: lb-g30e1b80b5g1itbemc0g5jj3
    Action:
      type: object
      required:
        - actionType
        - actionName
      properties:
        actionType:
          type: string
          description: Action type
          $ref: '#/components/schemas/ActionType'
        actionName:
          type: string
          description: Action name
        icon:
          description: Action icon
          $ref: '#/components/schemas/Icon'
    ListActionResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Action list
              items:
                $ref: '#/components/schemas/Action'
    ListSkillResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Skill list
              items:
                $ref: '#/components/schemas/Skill'
    ListSkillInstanceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Skill list
              items:
                $ref: '#/components/schemas/SkillInstance'
    SkillInstanceCreateParam:
      type: object
      required:
        - displayName
      properties:
        tplName:
          type: string
          description: Skill template name
          example: online-search
        displayName:
          type: string
          description: Skill display name
          example: My Custom Skill
        description:
          type: string
          description: Skill description
        icon:
          description: Skill instance icon
          $ref: '#/components/schemas/Icon'
        tplConfig:
          description: Skill template config
          $ref: '#/components/schemas/SkillTemplateConfig'
    CreateSkillInstanceRequest:
      type: object
      required:
        - instanceList
      properties:
        instanceList:
          type: array
          description: Skill instances to upsert
          items:
            $ref: '#/components/schemas/SkillInstanceCreateParam'
    CreateSkillInstanceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Skill instance list
              items:
                $ref: '#/components/schemas/SkillInstance'
    UpdateSkillInstanceRequest:
      type: object
      required:
        - skillId
      properties:
        skillId:
          type: string
          description: Skill ID
          example: s-g30e1b80b5g1itbemc0g5jj3
        displayName:
          type: string
          description: Skill display name
          example: My Custom Skill
        description:
          type: string
          description: Skill description
        icon:
          description: Skill instance icon
          $ref: '#/components/schemas/Icon'
        tplConfig:
          description: Skill template config
          $ref: '#/components/schemas/SkillTemplateConfig'
    UpdateSkillInstanceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              description: Skill instance list
              $ref: '#/components/schemas/SkillInstance'
    PinSkillInstanceRequest:
      type: object
      required:
        - skillId
      properties:
        skillId:
          type: string
          description: Skill ID to pin
    UnpinSkillInstanceRequest:
      type: object
      required:
        - skillId
      properties:
        skillId:
          type: string
          description: Skill ID to unpin
    DeleteSkillInstanceRequest:
      type: object
      required:
        - skillId
      properties:
        skillId:
          type: string
          description: Skill ID to delete
    SkillInput:
      type: object
      description: Skill input
      properties:
        query:
          type: string
          description: User query
        images:
          type: array
          description: Image list (storage keys)
          items:
            type: string
    SkillContextResourceItem:
      type: object
      description: Skill context resource item
      properties:
        resourceId:
          type: string
          description: Resource ID (if empty, this will be considered as external resource)
        resource:
          description: Resource
          $ref: '#/components/schemas/Resource'
        isCurrent:
          type: boolean
          description: Whether this resource is current
        metadata:
          type: object
          description: Resource context metadata
    SkillContextDocumentItem:
      type: object
      description: Skill context document item
      properties:
        docId:
          type: string
          description: Document ID
        document:
          description: Document
          $ref: '#/components/schemas/Document'
        isCurrent:
          type: boolean
          description: Whether this document is current
        metadata:
          type: object
          description: Canvas context metadata
    SkillContextContentItem:
      type: object
      description: Skill context content item
      required:
        - content
      properties:
        content:
          type: string
          description: Content
        metadata:
          type: object
          description: Content context metadata
    SkillContextUrlItem:
      type: object
      description: Skill context url item
      required:
        - url
      properties:
        url:
          type: string
          description: URL
        metadata:
          type: object
          description: URL context metadata
    SkillContext:
      type: object
      description: Skill invocation context
      properties:
        resources:
          type: array
          description: Context resources
          items:
            $ref: '#/components/schemas/SkillContextResourceItem'
        documents:
          type: array
          description: Context documents
          items:
            $ref: '#/components/schemas/SkillContextDocumentItem'
        contentList:
          type: array
          description: Context content list
          items:
            $ref: '#/components/schemas/SkillContextContentItem'
        urls:
          type: array
          description: List of URLs
          items:
            $ref: '#/components/schemas/SkillContextUrlItem'
    SkillContextKey:
      type: string
      enum:
        - resources
        - documents
        - contentList
        - urls
    SelectionKey:
      type: string
      enum:
        - documentSelection
        - resourceSelection
        - skillResponseSelection
        - extensionWeblinkSelection
        - documentCursorSelection
        - documentBeforeCursorSelection
        - documentAfterCursorSelection
    SkillContextRule:
      type: object
      required:
        - key
      properties:
        key:
          type: string
          description: Context key
          $ref: '#/components/schemas/SkillContextKey'
        limit:
          type: number
          description: Maximum number of items
          default: 50
        required:
          type: boolean
          description: Whether this context is required
          default: false
        preferredSelectionKeys:
          type: array
          description: Preferred selection keys (only applicable when key is `contentList`)
          items:
            $ref: '#/components/schemas/SelectionKey'
    ContextRuleGroupRelation:
      type: string
      enum:
        - regular
        - mutuallyExclusive
    SkillContextRuleGroup:
      type: object
      required:
        - rules
      properties:
        rules:
          type: array
          description: Skill context rules
          items:
            $ref: '#/components/schemas/SkillContextRule'
        relation:
          type: string
          description: Rule group relation
          default: regular
          $ref: '#/components/schemas/ContextRuleGroupRelation'
        preferredContextKeys:
          type: array
          description: Preferred context keys
          items:
            $ref: '#/components/schemas/SkillContextKey'
    SkillInvocationConfig:
      type: object
      properties:
        context:
          description: Skill context rule group
          $ref: '#/components/schemas/SkillContextRuleGroup'
    ActionType:
      type: string
      enum:
        - skill
        - tool
    ActionContextType:
      type: string
      enum:
        - resource
        - document
    ActionContextEntity:
      type: object
      properties:
        title:
          type: string
          description: Entity title
        content:
          type: string
          description: Entity content
    ActionContextItem:
      type: object
      properties:
        type:
          description: Context item type
          $ref: '#/components/schemas/ActionContextType'
        entityId:
          type: string
          description: Entity ID
        entityData:
          description: Entity data (will be auto populated if not provided)
          $ref: '#/components/schemas/ActionContextEntity'
        metadata:
          type: object
          description: Context metadata
    InvokeSkillRequest:
      type: object
      properties:
        input:
          description: Skill input
          $ref: '#/components/schemas/SkillInput'
        context:
          description: Skill invocation context
          $ref: '#/components/schemas/SkillContext'
        resultHistory:
          type: array
          description: Skill result history
          items:
            $ref: '#/components/schemas/ActionResult'
        runtimeConfig:
          description: Skill runtime config
          $ref: '#/components/schemas/SkillRuntimeConfig'
        tplConfig:
          description: Skill template config
          $ref: '#/components/schemas/SkillTemplateConfig'
        skillName:
          type: string
          description: Skill name (if not provided, commonQnA will be used)
          default: commonQnA
        target:
          description: Skill invocation target
          $ref: '#/components/schemas/Entity'
        projectId:
          type: string
          description: Project ID
        resultId:
          type: string
          description: |
            Result ID associated with this invocation.
            1) If not provided, a new resultId will be generated.
            2) If there is no existing result with this resultId, it will be created and run.
            3) If there is an existing result with this resultId, it will be rerun.
        locale:
          type: string
          description: Selected output locale
        modelName:
          type: string
          description: Selected model
        skillId:
          type: string
          description: Skill ID
        triggerId:
          type: string
          description: Trigger ID
    InvokeSkillResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            resultId:
              type: string
              description: Skill result ID
    ListSkillTriggerResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Skill trigger list
              items:
                $ref: '#/components/schemas/SkillTrigger'
    SkillTriggerCreateParam:
      type: object
      required:
        - skillId
        - displayName
        - triggerType
      properties:
        skillId:
          type: string
          description: Skill ID
          example: sk-g30e1b80b5g1itbemc0g5jj3
        displayName:
          type: string
          description: Trigger display name
          example: My trigger
        triggerType:
          description: Trigger type
          $ref: '#/components/schemas/SkillTriggerType'
        simpleEventName:
          description: Simple event name (only required when trigger type is `simpleEvent`)
          $ref: '#/components/schemas/SimpleEventName'
        timerConfig:
          description: Timer config (only required when trigger type is `timer`)
          $ref: '#/components/schemas/TimerTriggerConfig'
        input:
          description: Skill input
          $ref: '#/components/schemas/SkillInput'
        context:
          description: Skill invocation context
          $ref: '#/components/schemas/SkillContext'
        tplConfig:
          description: Skill template config
          $ref: '#/components/schemas/SkillTemplateConfig'
        enabled:
          type: boolean
          description: Whether this trigger is enabled
    CreateSkillTriggerRequest:
      type: object
      required:
        - triggerList
      properties:
        triggerList:
          type: array
          description: Skill triggers to upsert
          items:
            $ref: '#/components/schemas/SkillTriggerCreateParam'
    CreateSkillTriggerResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Skill trigger list
              items:
                $ref: '#/components/schemas/SkillTrigger'
    UpdateSkillTriggerRequest:
      allOf:
        - $ref: '#/components/schemas/SkillTriggerCreateParam'
        - type: object
          required:
            - triggerId
          properties:
            triggerId:
              type: string
              description: Trigger ID
              example: tr-g30e1b80b5g1itbemc0g5jj3
    UpdateSkillTriggerResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              description: Updated skill trigger
              $ref: '#/components/schemas/SkillTrigger'
    DeleteSkillTriggerRequest:
      type: object
      required:
        - triggerId
      properties:
        triggerId:
          type: string
          description: Trigger ID to delete
    UpdateUserSettingsRequest:
      type: object
      properties:
        name:
          type: string
          description: User name
          example: john_name
        nickname:
          type: string
          description: User nickname
          example: John Doe
        avatar:
          type: string
          description: User avatar
        avatarStorageKey:
          type: string
          description: User avatar storage key
        uiLocale:
          type: string
          description: UI locale
          example: en
        outputLocale:
          type: string
          description: Output locale
          example: en
        preferences:
          description: User preferences
          $ref: '#/components/schemas/UserPreferences'
        onboarding:
          description: Onboarding config
          $ref: '#/components/schemas/OnboardingConfig'
    CheckSettingsFieldResult:
      type: object
      required:
        - field
        - value
        - available
      properties:
        field:
          type: string
          description: Settings field
        value:
          type: string
          description: Settings field value
        available:
          type: boolean
          description: Whether the field value is available
    CheckSettingsFieldResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              description: Settings field check result
              $ref: '#/components/schemas/CheckSettingsFieldResult'
    CreateCheckoutSessionRequest:
      type: object
      required:
        - planType
      properties:
        planType:
          description: Subscription plan type
          $ref: '#/components/schemas/SubscriptionPlanType'
        interval:
          description: Subscription billing interval
          $ref: '#/components/schemas/SubscriptionInterval'
    CreateCheckoutSessionResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Checkout session
              properties:
                url:
                  type: string
                  description: Checkout session URL
    CreatePortalSessionResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Portal session
              properties:
                url:
                  type: string
                  description: Portal session URL
    SubscriptionPlan:
      type: object
      properties:
        planType:
          type: string
          description: Subscription plan type
        t1TokenQuota:
          type: number
          description: Token quota per month (T1)
        t2TokenQuota:
          type: number
          description: Token quota per month (T2)
        objectStorageQuota:
          type: string
          description: Object storage quota (in bytes)
        vectorStorageQuota:
          type: string
          description: Vector storage quota (in bytes)
    GetSubscriptionPlansResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Subscription plans
              items:
                $ref: '#/components/schemas/SubscriptionPlan'
    SubscriptionUsageData:
      type: object
      properties:
        token:
          description: Token usage meter
          $ref: '#/components/schemas/TokenUsageMeter'
        storage:
          description: Storage usage meter
          $ref: '#/components/schemas/StorageUsageMeter'
        fileParsing:
          description: File parsing meter
          $ref: '#/components/schemas/FileParsingMeter'
    GetSubscriptionUsageResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Subscription usage
              $ref: '#/components/schemas/SubscriptionUsageData'
    WebSearchRequest:
      type: object
      properties:
        q:
          type: string
          description: Search query
        hl:
          type: string
          description: Language/locale code
        limit:
          type: number
          description: Web search result limit
          default: 10
    BatchWebSearchRequest:
      type: object
      properties:
        limit:
          type: number
          description: Web search result limit
          default: 10
        queries:
          type: array
          description: Web search queries
          items:
            $ref: '#/components/schemas/WebSearchRequest'
    MultiLingualWebSearchRequest:
      type: object
      required:
        - query
        - searchLocaleList
      properties:
        query:
          type: string
          description: Search query
        searchLocaleList:
          type: array
          description: List of search locales
          items:
            type: string
        displayLocale:
          type: string
          description: Display locale
          default: auto
        searchLimit:
          type: number
          description: Web search result limit per locale
        enableRerank:
          type: boolean
          description: Whether to enable reranking of search results
        rerankLimit:
          type: number
          description: Limit for reranked results
        rerankRelevanceThreshold:
          type: number
          description: Relevance threshold for reranking
    MultiLingualWebSearchResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Multilingual web search results
              required:
                - sources
                - searchSteps
              properties:
                sources:
                  type: array
                  description: Search result sources
                  items:
                    $ref: '#/components/schemas/Source'
                searchSteps:
                  type: array
                  description: Search steps
                  items:
                    $ref: '#/components/schemas/SearchStep'
    WebSearchResult:
      type: object
      properties:
        name:
          type: string
          description: Web search result name
        url:
          type: string
          description: Web search result url
        snippet:
          type: string
          description: Web search result snippet
        locale:
          type: string
          description: Web search result locale
    WebSearchResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Web search results
              items:
                $ref: '#/components/schemas/WebSearchResult'
    RerankResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Reranked results
              items:
                $ref: '#/components/schemas/SearchResult'
    SearchOptions:
      type: object
      description: Search options for internal use
      properties:
        enableReranker:
          type: boolean
          description: Whether to enable reranker
          default: true
    SearchDomain:
      type: string
      enum:
        - resource
        - document
        - canvas
    SearchMode:
      type: string
      enum:
        - keyword
        - vector
        - hybrid
    SearchRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: Search query (if empty, return last updated data)
        domains:
          type: array
          description: Search domains (if not specified, return all domains)
          items:
            $ref: '#/components/schemas/SearchDomain'
        entities:
          type: array
          description: Search entities
          items:
            $ref: '#/components/schemas/Entity'
        mode:
          type: string
          description: Search mode
          $ref: '#/components/schemas/SearchMode'
          default: keyword
        projectId:
          type: string
          description: Project ID
        limit:
          type: number
          description: Search result limit for each domain
          default: 5
    SearchResultSnippet:
      type: object
      properties:
        text:
          type: string
          description: Search result content text
        highlightedText:
          type: string
          description: Search result highlighted content text with em html tags
    SearchResult:
      type: object
      required:
        - id
        - domain
        - title
      properties:
        id:
          type: string
          description: Search result ID to navigate to
        domain:
          description: Search result domain
          $ref: '#/components/schemas/SearchDomain'
        title:
          type: string
          description: Search result title
        highlightedTitle:
          type: string
          description: Search result highlighted title with em html tags
        contentPreview:
          type: string
          description: Search result content preview
        snippets:
          type: array
          description: Search result content list with highlight marks
          items:
            $ref: '#/components/schemas/SearchResultSnippet'
        relevanceScore:
          type: number
          description: Search result relevance score
        metadata:
          type: object
          description: Search result metadata
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
          description: Data creation time
        updatedAt:
          type: string
          format: date-time
          description: Data update time
    SearchResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Search result
              items:
                $ref: '#/components/schemas/SearchResult'
    ScrapeWeblinkRequest:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          description: Weblink URL
    ScrapeWeblinkResult:
      type: object
      properties:
        title:
          type: string
          description: Weblink title
        description:
          type: string
          description: Weblink description
        image:
          type: string
          description: Weblink image
    ScrapeWeblinkResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              description: Weblink scrape result
              $ref: '#/components/schemas/ScrapeWeblinkResult'
    FileVisibility:
      type: string
      enum:
        - public
        - private
    UploadRequest:
      type: object
      required:
        - file
      properties:
        file:
          type: string
          format: binary
          description: File to upload
        entityId:
          type: string
          description: Entity ID
        entityType:
          description: Entity type
          $ref: '#/components/schemas/EntityType'
        visibility:
          description: File visibility (default is private)
          $ref: '#/components/schemas/FileVisibility'
        storageKey:
          type: string
          description: Storage key (if provided, the file will be replaced if it already exists)
    UploadResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: File upload result
              required:
                - url
                - storageKey
              properties:
                url:
                  type: string
                  description: File URL
                storageKey:
                  type: string
                  description: Storage key
    ConvertRequest:
      type: object
      required:
        - file
      properties:
        file:
          type: string
          format: binary
          description: The file to convert
        from:
          type: string
          description: Source format (e.g., html)
          default: html
        to:
          type: string
          description: Target format (e.g., markdown)
          default: markdown
    ConvertResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                content:
                  type: string
                  description: Converted markdown content
    ModelCapabilities:
      type: object
      properties:
        functionCall:
          type: boolean
          description: Whether this model supports function calling
        vision:
          type: boolean
          description: Whether this model can take images as input
        reasoning:
          type: boolean
          description: Whether this model includes reasoning content
        contextCaching:
          type: boolean
          description: Whether this model supports context caching
    ModelInfo:
      type: object
      required:
        - name
        - label
        - provider
        - tier
        - contextLimit
        - maxOutput
      properties:
        name:
          type: string
          description: Model name
        label:
          type: string
          description: Model label
        provider:
          type: string
          description: Model provider
        tier:
          type: string
          description: Model tier
          $ref: '#/components/schemas/ModelTier'
        contextLimit:
          type: number
          description: Model context limit (in tokens)
        maxOutput:
          type: number
          description: Model max output length (in tokens)
        capabilities:
          description: Model capabilities
          $ref: '#/components/schemas/ModelCapabilities'
        isDefault:
          type: boolean
          description: Whether this model is the default model
    ListModelsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Model list
              items:
                $ref: '#/components/schemas/ModelInfo'
    DocumentInterface:
      type: object
      properties:
        id:
          type: string
          description: An optional identifier for the document. Ideally this should be unique across the document collection and formatted as a UUID.
        pageContent:
          type: string
          description: The main content of the document.
        metadata:
          type: object
          additionalProperties: true
          description: Metadata associated with the document.
    InMemorySearchResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/DocumentInterface'
    CanvasNodeType:
      type: string
      enum:
        - document
        - codeArtifact
        - website
        - resource
        - skill
        - tool
        - skillResponse
        - toolResponse
        - memo
        - group
        - image
        - mindMap
    CanvasNodeData:
      type: object
      required:
        - title
        - entityId
      properties:
        title:
          type: string
          description: Node title
        entityId:
          type: string
          description: Node entity ID
        contentPreview:
          type: string
          description: Node content preview
        metadata:
          type: object
          additionalProperties: true
          description: Node metadata
    CanvasNode:
      type: object
      required:
        - type
        - data
      properties:
        type:
          description: Node type
          $ref: '#/components/schemas/CanvasNodeType'
        data:
          type: object
          $ref: '#/components/schemas/CanvasNodeData'
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
